#'
#' @importFrom magrittr %>%
#' @importFrom dplyr mutate
#'
#' @export
eq_create_label <- function(eqdata) {
data %>% dplyr::mutate(popup_text=paste(ifelse(!is.na(`Location Name`)&`Location Name`!="",
paste("<p><strong>Location:</strong> ",
`Location Name`,"</p>",sep=""),
""),
ifelse(!is.na(Mag),
paste("<p><strong>Magnitude:</strong> ",
Mag,"</p>",sep=""),
""),
ifelse(!is.na(`Total Deaths`),
paste("<p><strong>Total deaths:</strong> ",
`Total Deaths`,"</p>",sep=""),
"")))
}
#' print("eq_map")
#' This function creates an interactive Leaflet map to visualize earthquake
#' locations contained in the input dataframe marking them with a circle whose
#' size is proportional to the earthquake's magnitude. Earthquake locations can
#' be annotated
#'
#' @param eqdata the data frame to use for map creation
#' @param annot_col a string indicating the name of the column used for popup
#' annotation
#'
#' @return This function creates a Leaflet map to visualize the earthquake
#' locations contained in the input dataframe
#'
#' @examples
#' \dontrun{
#' eq_map(eqdata, annot_col="Date")
#' eq_map(eq_create_label(eqdata), annot_col="popup_text")
#' }
#'
#' @importFrom magrittr %>%
#' @importFrom dplyr filter
#' @importFrom leaflet leaflet
#' @importFrom leaflet addTiles
#' @importFrom leaflet addCircles
#'
#' @export
eq_map <- function(data, annot_col){
data %>% dplyr::filter(!is.na(Latitude)&!is.na(Longitude)) %>%
leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::addCircles(lat=~Latitude, lng=~Longitude,
weight=1,radius=~Mag*10000, popup=~eval(parse(text=annot_col)))
}
filename="../earthquakes-2020-12-03_12-19-21_-1000.tsv"
library(readr)
library(magrittr)
data=readr::read_delim(filename,delim="\t")
data=data[-1,]
data2=eq_clean_data(data)
data3=eq_location_clean(data2)
data3 %>% dplyr::filter(Country %in% c("China","Japan")) %>%
dplyr::select(Date, Country, Mag, `Total Deaths`, `Location Name`)  %>%
ggplot2::ggplot() +
geom_timeline(aes(x=Date, y=Country, size = Mag, color = `Total Deaths`))+
geom_timeline_label(aes(x=Date,label=`Location Name`,y=Country,mag=Mag,n_max=5))
data3 %>% dplyr::filter(Country=="Mexico" & lubridate::year(Date) >= 2000) %>%
eq_create_label() %>% eq_map(annot_col="Date")
data3 %>% dplyr::filter(Country=="Mexico" & lubridate::year(Date) >= 2000) %>%
eq_create_label() %>% eq_map(annot_col="popup_text")
data3 %>% dplyr::filter(Country=="Mexico" & lubridate::year(Date) >= 2000)
data3 %>% dplyr::filter(Country=="Mexico" & lubridate::year(Date) >= 2000) %>%
eq_create_label() %>% eq_map(annot_col="popup_text")
data3 %>% dplyr::filter(Country %in% c("China","Japan")) %>%
dplyr::select(Date, Country, Mag, `Total Deaths`, `Location Name`)  %>%
ggplot2::ggplot() +
geom_timeline(aes(x=Date, y=Country, size = Mag, color = `Total Deaths`))+
geom_timeline_label(aes(x=Date,label=`Location Name`,y=Country,mag=Mag,n_max=5))
data3 %>% dplyr::filter(Country=="Mexico" & lubridate::year(Date) >= 2000) %>%
eq_create_label() %>% eq_map(annot_col="popup_text")
data3$Country
data3$Country=="Mexico"
sum(data3$Country=="Mexico")
data3$Country
filename="../earthquakes-2020-12-03_12-19-21_-1000.tsv"
library(readr)
library(magrittr)
data=readr::read_delim(filename,delim="\t")
data=data[-1,]
data2=eq_clean_data(data)
data3=eq_location_clean(data2)
data3$Country
data3$Country=="Mexico"
sum(data3$Country=="Mexico")
data3$Country
data4=data3 %>% dplyr::filter(Country=="Mexico" & lubridate::year(Date) >= 2000)
data4$Country
data3$Country=="Mexico"
sum(data3$Country=="Mexico",na.rm=TRUE)
filename="../earthquakes-2020-12-03_12-19-21_-1000.tsv"
library(readr)
library(magrittr)
data=readr::read_delim(filename,delim="\t")
data3 %>% dplyr::filter(Country=="Mexico" & lubridate::year(Date) >= 2000) %>%
eq_create_label()
data3 %>% dplyr::filter(Country=="Mexico" & lubridate::year(Date) >= 2000) %>%
eq_create_label()
data3 %>% dplyr::filter(Country=="Mexico" & lubridate::year(Date) >= 2000) %>%
eq_create_label() %>% eq_map(annot_col="popup_text")
data4=data3 %>% dplyr::filter(Country=="Mexico" & lubridate::year(Date) >= 2000)
data4 %>%
eq_create_label() %>% eq_map(annot_col="popup_text")
data4 %>% eq_create_label() %>% eq_map(annot_col="popup_text")
eq_create_label(data4) %>% eq_map(annot_col="popup_text")
#' print("eq_create_label")
#' This function creates an HTML label as a new column in an earthquake daframe
#' where Location, Magnitude and Total Deaths are introduced and that can be
#' used for Leafle map annotation
#'
#' @param eqdata the data frame to add the HTML label to
#'
#' @return This function returns the input dataset with an additional column
#' called popup_text which contains an HTML string that can be used to
#' annotate in Leaflet maps  the Location, Magnitude and Total Deaths of
#' earthquakes.
#'
#' @examples
#' \dontrun{
#' annotateddata <- eq_create_label(data)
#' }
#'
#' @importFrom rlang .data
#' @importFrom magrittr %>%
#' @importFrom dplyr mutate
#'
#' @export
eq_create_label <- function(eqdata = rlang::.data) {
data %>% dplyr::mutate(popup_text=paste(ifelse(!is.na(`Location Name`)&`Location Name`!="",
paste("<p><strong>Location:</strong> ",
`Location Name`,"</p>",sep=""),
""),
ifelse(!is.na(Mag),
paste("<p><strong>Magnitude:</strong> ",
Mag,"</p>",sep=""),
""),
ifelse(!is.na(`Total Deaths`),
paste("<p><strong>Total deaths:</strong> ",
`Total Deaths`,"</p>",sep=""),
"")))
}
#' print("eq_map")
#' This function creates an interactive Leaflet map to visualize earthquake
#' locations contained in the input dataframe marking them with a circle whose
#' size is proportional to the earthquake's magnitude. Earthquake locations can
#' be annotated
#'
#' @param eqdata the data frame to use for map creation
#' @param annot_col a string indicating the name of the column used for popup
#' annotation
#'
#' @return This function creates a Leaflet map to visualize the earthquake
#' locations contained in the input dataframe
#'
#' @examples
#' \dontrun{
#' eq_map(eqdata, annot_col="Date")
#' eq_map(eq_create_label(eqdata), annot_col="popup_text")
#' }
#'
#' @importFrom rlang .data
#' @importFrom magrittr %>%
#' @importFrom dplyr filter
#' @importFrom leaflet leaflet
#' @importFrom leaflet addTiles
#' @importFrom leaflet addCircles
#'
#' @export
eq_map <- function(data=rlang::.data, annot_col){
data %>% dplyr::filter(!is.na(Latitude)&!is.na(Longitude)) %>%
leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::addCircles(lat=~Latitude, lng=~Longitude,
weight=1,radius=~Mag*10000, popup=~eval(parse(text=annot_col)))
}
data3 %>% dplyr::filter(Country=="Mexico" & lubridate::year(Date) >= 2000) %>%
eq_create_label() %>% eq_map(annot_col="popup_text")
#' print("eq_create_label")
#' This function creates an HTML label as a new column in an earthquake daframe
#' where Location, Magnitude and Total Deaths are introduced and that can be
#' used for Leafle map annotation
#'
#' @param data the data frame to add the HTML label to
#'
#' @return This function returns the input dataset with an additional column
#' called popup_text which contains an HTML string that can be used to
#' annotate in Leaflet maps  the Location, Magnitude and Total Deaths of
#' earthquakes.
#'
#' @examples
#' \dontrun{
#' annotateddata <- eq_create_label(data)
#' }
#'
#' @importFrom magrittr %>%
#' @importFrom dplyr mutate
#'
#' @export
eq_create_label <- function(data = rlang::.data) {
data %>% dplyr::mutate(popup_text=paste(ifelse(!is.na(`Location Name`)&`Location Name`!="",
paste("<p><strong>Location:</strong> ",
`Location Name`,"</p>",sep=""),
""),
ifelse(!is.na(Mag),
paste("<p><strong>Magnitude:</strong> ",
Mag,"</p>",sep=""),
""),
ifelse(!is.na(`Total Deaths`),
paste("<p><strong>Total deaths:</strong> ",
`Total Deaths`,"</p>",sep=""),
"")))
}
#' print("eq_map")
#' This function creates an interactive Leaflet map to visualize earthquake
#' locations contained in the input dataframe marking them with a circle whose
#' size is proportional to the earthquake's magnitude. Earthquake locations can
#' be annotated
#'
#' @param data the data frame to use for map creation
#' @param annot_col a string indicating the name of the column used for popup
#' annotation
#'
#' @return This function creates a Leaflet map to visualize the earthquake
#' locations contained in the input dataframe
#'
#' @examples
#' \dontrun{
#' eq_map(eqdata, annot_col="Date")
#' eq_map(eq_create_label(eqdata), annot_col="popup_text")
#' }
#'
#' @importFrom magrittr %>%
#' @importFrom dplyr filter
#' @importFrom leaflet leaflet
#' @importFrom leaflet addTiles
#' @importFrom leaflet addCircles
#'
#' @export
eq_map <- function(data, annot_col){
data %>% dplyr::filter(!is.na(Latitude)&!is.na(Longitude)) %>%
leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::addCircles(lat=~Latitude, lng=~Longitude,
weight=1,radius=~Mag*10000, popup=~eval(parse(text=annot_col)))
}
data3 %>% dplyr::filter(Country=="Mexico" & lubridate::year(Date) >= 2000) %>%
eq_create_label() %>% eq_map(annot_col="popup_text")
data3 %>% dplyr::filter(Country=="Mexico" & lubridate::year(Date) >= 2000) %>%
eq_create_label() %>% eq_map(annot_col="Date")
data3 %>% dplyr::filter(Country=="Mexico" & lubridate::year(Date) >= 2000) %>%
eq_create_label() %>% eq_map(annot_col="Mag")
?addCircles
data3$Date
is.na(data3$Date)
sum(is.na(data3$Date))
#' print("eq_clean_data")
#' This function applies some cleaning processes to a dataset downloaded from
#' the \href{https://www.ngdc.noaa.gov/hazel/view/hazards/earthquake/search}{NOAA Significant Earthquake Database}.
#' Specifically, it converts the Latitude and Longitude columns to numeric class
#' and combines year, month and day into a single variable in the Date class.
#'
#' @param data the raw data frame to clean
#'
#' @return This function returns a dataset where Longitude and Latitude are
#' numeric variables and there is a new Date column containing the date. The old
#' year, month and day columns are dropped.
#'
#' @examples
#' \dontrun{
#' cleandata <- eq_clean_data(rawdata)
#' }
#'
#' @importFrom magrittr %>%
#' @importFrom dplyr mutate
#' @importFrom dplyr select
#' @importFrom lubridate ymd
#' @importFrom lubridate years
#' @importFrom stringr str_pad
#'
#' @export
eq_clean_data <- function(data){
data %>% dplyr::mutate(Date=lubridate::ymd(paste(stringr::str_pad(ifelse(Year>0,as.character(Year),"0"),4,"0",side="left"),
stringr::str_pad(ifelse(is.na(Mo),"1",as.character(Mo)),2,"0",side="left"),
stringr::str_pad(ifelse(is.na(Dy),"1",as.character(Dy)),2,"0",side="left"),sep="-"))
+lubridate::years(ifelse(Year<0,Year,0)),.before=Year) %>%
dplyr::select(-c(Year,Mo,Dy)) %>%
dplyr::mutate(Latitude=as.numeric(Latitude,Longitude=as.numeric(Longitude)))
}
#' print("eq_location_clean")
#' This function applies some cleaning processes to the Location Name column in
#' a dataset downloaded from the \href{https://www.ngdc.noaa.gov/hazel/view/hazards/earthquake/search}{NOAA Significant Earthquake Database}.
#' Specifically, it drops any location beyond that or those of the first
#' occurring country, it drops the preceding name of country and region, and
#' converts the resulting location name to title case.
#'
#' @param data the raw data frame to clean
#'
#' @return This function returns a dataset where the Location Name column has
#' been cleaned, by removing location in more that one country, removing the
#' country name and converting the name to title case. The country name, where
#' available is also converted to title case and assigned to a separate column.
#'
#' @examples
#' \dontrun{
#' cleandata <- eq_location_clean(data)
#' }
#'
#' @importFrom magrittr %>%
#' @importFrom dplyr mutate
#' @importFrom stringr str_detect
#' @importFrom stringr str_sub
#' @importFrom stringr str_locate
#' @importFrom stringr str_to_title
#' @importFrom stringr str_trim
#' @importFrom stringi stri_reverse
#'
#' @export
eq_location_clean <- function(data){
data  %>% dplyr::mutate(`Location Name`=ifelse(stringr::str_detect(`Location Name`,";"),
stringr::str_sub(`Location Name`,
end=stringr::str_locate(`Location Name`,
";")-1),
`Location Name`)) %>%
dplyr::mutate(Country=ifelse(stringr::str_detect(`Location Name`,":"),
stringr::str_sub(`Location Name`,
end=stringr::str_locate(`Location Name`,
":")-1),
"")) %>%
dplyr::mutate(`Location Name`=stringi::stri_reverse(`Location Name`)) %>%
dplyr::mutate(`Location Name`=ifelse(stringr::str_detect(`Location Name`,":"),
stringr::str_sub(`Location Name`,
end=stringr::str_locate(`Location Name`,
":")-1),
`Location Name`)) %>%
dplyr::mutate(`Location Name`=stringi::stri_reverse(`Location Name`)) %>%
dplyr::mutate(Country=stringr::str_to_title(Country),
`Location Name`=stringr::str_to_title(stringr::str_trim(`Location Name`,side="both")))
}
filename="../earthquakes-2020-12-03_12-19-21_-1000.tsv"
library(readr)
library(magrittr)
data=readr::read_delim(filename,delim="\t")
data=data[-1,]
data2=eq_clean_data(data)
data3=eq_location_clean(data2)
data3 %>% dplyr::filter(Country=="Mexico" & lubridate::year(Date) >= 2000) %>%
eq_create_label() %>% eq_map(annot_col="popup_text")
#' print("eq_clean_data")
#' This function applies some cleaning processes to a dataset downloaded from
#' the \href{https://www.ngdc.noaa.gov/hazel/view/hazards/earthquake/search}{NOAA Significant Earthquake Database}.
#' Specifically, it converts the Latitude and Longitude columns to numeric class
#' and combines year, month and day into a single variable in the Date class.
#'
#' @param data the raw data frame to clean
#'
#' @return This function returns a dataset where Longitude and Latitude are
#' numeric variables and there is a new Date column containing the date. The old
#' year, month and day columns are dropped.
#'
#' @examples
#' \dontrun{
#' cleandata <- eq_clean_data(rawdata)
#' }
#'
#' @importFrom magrittr %>%
#' @importFrom dplyr mutate
#' @importFrom dplyr select
#' @importFrom lubridate ymd
#' @importFrom lubridate years
#' @importFrom stringr str_pad
#'
#' @export
eq_clean_data <- function(data){
data %>% dplyr::mutate(Date=lubridate::ymd(paste(stringr::str_pad(ifelse(Year>0,as.character(Year),"0"),4,"0",side="left"),
stringr::str_pad(ifelse(is.na(Mo),"1",as.character(Mo)),2,"0",side="left"),
stringr::str_pad(ifelse(is.na(Dy),"1",as.character(Dy)),2,"0",side="left"),sep="-"))
+lubridate::years(ifelse(Year<0,Year,0)),.before=Year) %>%
dplyr::select(-c(Year,Mo,Dy)) %>%
dplyr::mutate(Latitude=as.numeric(Latitude,Longitude=as.numeric(Longitude)))
}
#' print("eq_location_clean")
#' This function applies some cleaning processes to the Location Name column in
#' a dataset downloaded from the \href{https://www.ngdc.noaa.gov/hazel/view/hazards/earthquake/search}{NOAA Significant Earthquake Database}.
#' Specifically, it drops any location beyond that or those of the first
#' occurring country, it drops the preceding name of country and region, and
#' converts the resulting location name to title case.
#'
#' @param data the raw data frame to clean
#'
#' @return This function returns a dataset where the Location Name column has
#' been cleaned, by removing location in more that one country, removing the
#' country name and converting the name to title case. The country name, where
#' available is also converted to title case and assigned to a separate column.
#'
#' @examples
#' \dontrun{
#' cleandata <- eq_location_clean(data)
#' }
#'
#' @importFrom magrittr %>%
#' @importFrom dplyr mutate
#' @importFrom stringr str_detect
#' @importFrom stringr str_sub
#' @importFrom stringr str_locate
#' @importFrom stringr str_to_title
#' @importFrom stringr str_trim
#' @importFrom stringi stri_reverse
#'
#' @export
eq_location_clean <- function(data){
data  %>% dplyr::mutate(`Location Name`=ifelse(stringr::str_detect(`Location Name`,";"),
stringr::str_sub(`Location Name`,
end=stringr::str_locate(`Location Name`,
";")-1),
`Location Name`)) %>%
dplyr::mutate(Country=ifelse(stringr::str_detect(`Location Name`,":"),
stringr::str_sub(`Location Name`,
end=stringr::str_locate(`Location Name`,
":")-1),
NA)) %>%
dplyr::mutate(`Location Name`=stringi::stri_reverse(`Location Name`)) %>%
dplyr::mutate(`Location Name`=ifelse(stringr::str_detect(`Location Name`,":"),
stringr::str_sub(`Location Name`,
end=stringr::str_locate(`Location Name`,
":")-1),
`Location Name`)) %>%
dplyr::mutate(`Location Name`=stringi::stri_reverse(`Location Name`)) %>%
dplyr::mutate(Country=stringr::str_to_title(Country),
`Location Name`=stringr::str_to_title(stringr::str_trim(`Location Name`,side="both")))
}
filename="../earthquakes-2020-12-03_12-19-21_-1000.tsv"
library(readr)
library(magrittr)
data=readr::read_delim(filename,delim="\t")
data=data[-1,]
data2=eq_clean_data(data)
data3=eq_location_clean(data2)
data3 %>% dplyr::filter(Country=="Mexico" & lubridate::year(Date) >= 2000) %>%
eq_create_label() %>% eq_map(annot_col="popup_text")
data3 %>% dplyr::filter(Country=="Mexico" & lubridate::year(Date) >= 2000) %>%
eq_create_label() %>% eq_map(annot_col="Mag")
data3 %>% dplyr::filter(Country=="Mexico" & lubridate::year(Date) >= 2000) %>%
eq_create_label() %>% eq_map(annot_col="Date")
library(roxygen2)
?roxygen3
?roxygen2
library(devtools)
load_all
load_all()
document()
document()
use_readme_md
use_readme_md()
library(devtools)
load_all()
library(devtools)
load_all
load_all()
load_all()
library(EarthquakeVisualization)
library(readr)
library(magrittr)
filename="earthquakes.tsv"
data=readr::read_delim(filename,delim="\t")
data=data[-1,]
data %>% eq_clean_data() %>% eq_location_clean() %>%
dplyr::filter(Country %in% c("Turkey","Japan")) %>%
dplyr::select(Date, Country, Mag, `Total Deaths`, `Location Name`)  %>%
ggplot2::ggplot() +
geom_timeline(aes(x=Date, y=Country, size = Mag, color = `Total Deaths`))+
geom_timeline_label(aes(x=Date,label=`Location Name`,y=Country,mag=Mag,n_max=5))
load_all()
filename="../earthquakes-2020-12-03_12-19-21_-1000.tsv"
data=readr::read_delim(filename,delim="\t")
data=data[-1,]
data %>% eq_clean_data() %>% eq_location_clean() %>%
dplyr::filter(Country %in% c("Turkey","Japan")) %>%
dplyr::select(Date, Country, Mag, `Total Deaths`, `Location Name`)  %>%
ggplot2::ggplot() +
geom_timeline(aes(x=Date, y=Country, size = Mag, color = `Total Deaths`))+
geom_timeline_label(aes(x=Date,label=`Location Name`,y=Country,mag=Mag,n_max=5))
data %>% dplyr::filter(Country=="Mexico" & lubridate::year(Date) >= 2000) %>%
eq_create_label() %>% eq_map(annot_col="popup_text")
data %>% eq_clean_data() %>% eq_location_clean() %>%
dplyr::filter(Country=="Mexico" & lubridate::year(Date) >= 2000) %>%
eq_create_label() %>% eq_map(annot_col="popup_text")
data %>% eq_clean_data() %>% eq_location_clean() %>%
dplyr::filter(Country %in% c("Turkey","Japan") & lubridate::year(Date) >= 2000 ) %>%
dplyr::select(Date, Country, Mag, `Total Deaths`, `Location Name`)  %>%
ggplot2::ggplot() +
geom_timeline(aes(x=Date, y=Country, size = Mag, color = `Total Deaths`))+
geom_timeline_label(aes(x=Date,label=`Location Name`,y=Country,mag=Mag,n_max=5))
data %>% eq_clean_data() %>% eq_location_clean() %>%
dplyr::filter(Country %in% c("Turkey","Japan","Indonesia") & lubridate::year(Date) >= 2000 ) %>%
dplyr::select(Date, Country, Mag, `Total Deaths`, `Location Name`)  %>%
ggplot2::ggplot() +
geom_timeline(aes(x=Date, y=Country, size = Mag, color = `Total Deaths`))+
geom_timeline_label(aes(x=Date,label=`Location Name`,y=Country,mag=Mag,n_max=5))
data %>% eq_clean_data() %>% eq_location_clean() %>%
dplyr::filter(Country %in% c("Japan","Indonesia") & lubridate::year(Date) >= 2000 ) %>%
dplyr::select(Date, Country, Mag, `Total Deaths`, `Location Name`)  %>%
ggplot2::ggplot() +
geom_timeline(aes(x=Date, y=Country, size = Mag, color = `Total Deaths`))+
geom_timeline_label(aes(x=Date,label=`Location Name`,y=Country,mag=Mag,n_max=5))
use_vignette("earthquakevisualization")
